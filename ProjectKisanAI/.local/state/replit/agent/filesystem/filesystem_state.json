{"file_contents":{"README.md":{"content":"# Project Kisan - AI Agricultural Assistant\n\n## Overview\n\nProject Kisan is a comprehensive AI-powered agricultural assistant designed to help small-scale farmers in India. The application provides instant crop disease diagnosis through image analysis, real-time market price information, government scheme recommendations, and weather-based farming advice. The system is built with a focus on accessibility, featuring voice-first interactions to overcome literacy barriers.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for fast development\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom agricultural color scheme\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Voice Interface**: Web Speech API for speech recognition and synthesis\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js RESTful API\n- **Language**: TypeScript with ESM modules\n- **AI Integration**: Google Gemini 2.5 Pro for multimodal analysis\n- **Database**: PostgreSQL with Drizzle ORM\n- **Session Management**: In-memory storage with plans for PostgreSQL sessions\n\n### Database Design\nThe application uses PostgreSQL with the following key tables:\n- `users` - Farmer profiles and preferences\n- `disease_scans` - Crop disease diagnosis history\n- `market_prices` - Real-time commodity pricing data\n- `government_schemes` - Available subsidies and programs\n- `activities` - User interaction tracking\n\n## Key Components\n\n### 1. Disease Diagnosis System\n- **Image Upload**: Camera capture or file upload functionality\n- **AI Analysis**: Gemini Vision API for crop disease identification\n- **Results Display**: Confidence scores, treatment recommendations, and severity assessment\n- **History Tracking**: Stored diagnosis results for future reference\n\n### 2. Market Intelligence\n- **Price Data**: Real-time commodity pricing with trend analysis\n- **Market Insights**: AI-generated market analysis and recommendations\n- **Multi-Crop Support**: Coverage for major Indian agricultural commodities\n\n### 3. Government Scheme Navigator\n- **Scheme Database**: Comprehensive government program information\n- **Eligibility Matching**: AI-powered scheme recommendations based on farmer profiles\n- **Application Links**: Direct integration with government portals\n\n### 4. Voice Interface\n- **Multi-Language Support**: English and Indian languages (Hindi, Kannada, Telugu)\n- **Speech Recognition**: Web Speech API for voice commands\n- **Text-to-Speech**: Audio feedback for low-literacy users\n- **Command Processing**: Natural language intent recognition\n\n### 5. Weather Integration\n- **Current Conditions**: Temperature, humidity, rainfall data\n- **Farming Advice**: Weather-based agricultural recommendations\n- **Location-Based**: Geographically relevant information\n\n## Data Flow\n\n1. **User Authentication**: Simple username-based system with future expansion for proper authentication\n2. **Image Processing**: Client uploads → Base64 encoding → Gemini API → Results storage\n3. **Market Data**: External API integration → Real-time pricing → Trend analysis\n4. **Voice Commands**: Speech input → Intent recognition → Action routing → Audio response\n5. **Database Operations**: Drizzle ORM → PostgreSQL → Structured data storage\n\n## External Dependencies\n\n### AI and ML Services\n- **Google Gemini API**: Multimodal AI for image analysis and text generation\n- **Web Speech API**: Browser-native speech recognition and synthesis\n\n### Database and Storage\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations\n\n### UI and Styling\n- **Shadcn/ui**: Pre-built accessible components\n- **Radix UI**: Headless component primitives\n- **Tailwind CSS**: Utility-first styling framework\n\n### Development Tools\n- **Vite**: Fast build tool and dev server\n- **TypeScript**: Type safety across the stack\n- **TanStack React Query**: Server state management\n\n## Deployment Strategy\n\n### Development Environment\n- **Local Development**: Vite dev server with hot module replacement\n- **Environment Variables**: DATABASE_URL and GEMINI_API_KEY required\n- **Database Migrations**: Drizzle Kit for schema management\n\n### Production Deployment\n- **Build Process**: Vite builds client, esbuild bundles server\n- **Static Assets**: Client built to `dist/public`\n- **Server Bundle**: Express server bundled to `dist/index.js`\n- **Database**: Neon PostgreSQL with connection pooling\n\n### Environment Configuration\n- **Development**: `NODE_ENV=development` with tsx for TypeScript execution\n- **Production**: `NODE_ENV=production` with compiled JavaScript\n- **Database**: Automated migrations through `drizzle-kit push`\n\n## Changelog\n- Aug 28, 2025. Initial setup\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n","size_bytes":4950},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (process.env.NODE_ENV === 'production' && !process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/postgres',\n  },\n});\n","size_bytes":426},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI-Powered Farming Assistant\n\n## Project Overview\nThis is a full-stack farming assistant application that provides AI-powered services for farmers including crop disease detection, market price tracking, government schemes information, and weather data.\n\n## Technology Stack\n- **Frontend**: React + TypeScript + Vite + Tailwind CSS\n- **Backend**: Express.js + TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **AI Services**: Google Gemini AI\n- **UI Components**: Radix UI + shadcn/ui\n\n## Architecture\n- **Client**: React SPA in `/client` folder served on port 5000\n- **Server**: Express API in `/server` folder running on port 9002\n- **Shared**: Common types and schemas in `/shared` folder\n- **Proxy Setup**: Vite dev server proxies `/api` requests to backend\n\n## Key Features\n1. **Disease Scanner**: Upload crop images for AI-powered disease detection\n2. **Market Prices**: Real-time crop price tracking and market analysis\n3. **Government Schemes**: Search and recommendations for farming subsidies\n4. **Weather Information**: Location-based weather data\n5. **Voice Assistant**: AI-powered voice query processing\n\n## Development Setup\nThe application is configured to run in Replit environment with:\n- Frontend accessible at port 5000 (configured for Replit proxy)\n- Backend API on port 9002\n- PostgreSQL database integration ready\n- Hot reload enabled for both frontend and backend\n\n## Recent Changes\n- Configured Vite to allow all hosts for Replit proxy compatibility\n- Set up full-stack development workflow\n- Configured deployment settings for Autoscale\n- Application is running and functional with mock data services\n\n## User Preferences\n- Full-stack TypeScript development\n- Modern React patterns with hooks\n- Tailwind CSS for styling\n- RESTful API design\n- Component-based architecture\n\n## Project Status\n✅ Development environment configured\n✅ Frontend and backend servers running\n✅ API endpoints functional\n✅ Deployment configuration set\n⏳ Database connection pending (using mock services)","size_bytes":2021},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: true,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:9002',\n        changeOrigin: true,\n      },\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":810},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"// Force new build: 2024-09-07 20:45\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    log(`Error: ${message}`);\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use environment variables for port and host, with fallbacks\n  const port = process.env.PORT ? parseInt(process.env.PORT, 10) : 9002;\n  const host = process.env.HOST || \"0.0.0.0\";\n\n  server.listen({\n    port,\n    host,\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1902},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { geminiService } from \"./services/gemini\";\nimport { marketService } from \"./services/market\";\nimport { schemesService } from \"./services/schemes\";\nimport { weatherService } from \"./services/weather\";\nimport { \n  diagnoseDiseaseSchema,\n  marketInsightSchema,\n  marketAnalysisSchema,\n  schemeRecommendationSchema,\n  voiceQuerySchema,\n  weatherSchema\n } from \"../shared/validation\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Disease diagnosis endpoint\n  app.post(\"/api/diagnose-disease\", async (req, res) => {\n    try {\n      const validation = diagnoseDiseaseSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.formErrors.fieldErrors });\n      }\n\n      const { imageData, userId } = validation.data;\n      \n      // Remove data:image/jpeg;base64, prefix if present\n      const base64Data = imageData.replace(/^data:image\\/[a-z]+;base64,/, \"\");\n      \n      const diagnosis = await geminiService.diagnoseCropDisease(base64Data);\n      \n      // Save to database if userId provided\n      if (userId) {\n        await storage.createDiseaseScan({\n          userId: userId,\n          imageData: base64Data,\n          diagnosis: diagnosis.disease,\n          confidence: diagnosis.confidence,\n          remedies: diagnosis.remedies,\n        });\n\n        // Add activity\n        await storage.createActivity({\n          userId: userId,\n          type: \"scan\",\n          title: \"Disease scan completed\",\n          description: `${diagnosis.disease} detected in crop`,\n          icon: \"fas fa-camera\",\n        });\n      }\n\n      res.json(diagnosis);\n    } catch (error) {\n      console.error(\"Disease diagnosis error:\", error);\n      res.status(500).json({ error: \"Failed to diagnose disease\" });\n    }\n  });\n\n  // Market prices endpoint\n  app.get(\"/api/market-prices\", async (req, res) => {\n    try {\n      const prices = await marketService.getCurrentPrices();\n      res.json(prices);\n    } catch (error) {\n      console.error(\"Market prices error:\", error);\n      res.status(500).json({ error: \"Failed to fetch market prices\" });\n    }\n  });\n\n  // Market price for specific crop\n  app.get(\"/api/market-prices/:crop\", async (req, res) => {\n    try {\n      const { crop } = req.params;\n      const price = await marketService.getPriceForCrop(crop);\n      \n      if (!price) {\n        return res.status(404).json({ error: \"Crop not found\" });\n      }\n\n      res.json(price);\n    } catch (error) {\n      console.error(\"Market price error:\", error);\n      res.status(500).json({ error: \"Failed to fetch crop price\" });\n    }\n  });\n\n  // Market insight endpoint\n  app.post(\"/api/market-insight\", async (req, res) => {\n    try {\n      const validation = marketInsightSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.formErrors.fieldErrors });\n      }\n      const { query, userId } = validation.data;\n      \n      const insight = await geminiService.getMarketInsight(query);\n      \n      // Add activity if userId provided\n      if (userId) {\n        await storage.createActivity({\n          userId: userId,\n          type: \"market\",\n          title: \"Market analysis requested\",\n          description: `Analysis for: ${query}`,\n          icon: \"fas fa-chart-line\",\n        });\n      }\n\n      res.json({ insight });\n    } catch (error) {\n      console.error(\"Market insight error:\", error);\n      res.status(500).json({ error: \"Failed to get market insight\" });\n    }\n  });\n\n  // Market analysis endpoint\n  app.post(\"/api/market-analysis\", async (req, res) => {\n    try {\n      const validation = marketAnalysisSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.formErrors.fieldErrors });\n      }\n      const { query, userId } = validation.data;\n\n      const analysis = await geminiService.generateMarketAnalysis(query);\n\n      // Add activity if userId provided\n      if (userId) {\n        await storage.createActivity({\n          userId: userId,\n          type: \"market\",\n          title: \"Market analysis generated\",\n          description: `In-depth analysis for: ${query}`,\n          icon: \"fas fa-chart-pie\",\n        });\n      }\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Market analysis error:\", error);\n      res.status(500).json({ error: \"Failed to generate market analysis\" });\n    }\n  });\n\n  // Government schemes endpoint\n  app.get(\"/api/schemes\", async (req, res) => {\n    try {\n      const schemes = await schemesService.getAllSchemes();\n      res.json(schemes);\n    } catch (error) {\n      console.error(\"Schemes error:\", error);\n      res.status(500).json({ error: \"Failed to fetch schemes\" });\n    }\n  });\n\n  // Search schemes endpoint\n  app.get(\"/api/schemes/search\", async (req, res) => {\n    try {\n      const { q: query } = req.query;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n\n      const schemes = await schemesService.searchSchemes(query);\n      res.json(schemes);\n    } catch (error) {\n      console.error(\"Scheme search error:\", error);\n      res.status(500).json({ error: \"Failed to search schemes\" });\n    }\n  });\n\n  // Scheme recommendation endpoint\n  app.post(\"/api/schemes/recommend\", async (req, res) => {\n    try {\n      const validation = schemeRecommendationSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.formErrors.fieldErrors });\n      }\n      const { query, userId } = validation.data;\n      \n      const recommendation = await schemesService.getSchemeRecommendation(query);\n      \n      // Add activity if userId provided\n      if (userId) {\n        await storage.createActivity({\n          userId: userId,\n          type: \"scheme\",\n          title: \"Scheme recommendation requested\",\n          description: `Query: ${query}`,\n          icon: \"fas fa-landmark\",\n        });\n      }\n\n      res.json({ recommendation });\n    } catch (error) {\n      console.error(\"Scheme recommendation error:\", error);\n      res.status(500).json({ error: \"Failed to get scheme recommendation\" });\n    }\n  });\n\n  // Voice query endpoint (general AI assistant)\n  app.post(\"/api/voice-query\", async (req, res) => {\n    try {\n      const validation = voiceQuerySchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.formErrors.fieldErrors });\n      }\n      const { query, userId } = validation.data;\n\n      const response = await geminiService.processVoiceQuery(query);\n      \n      // Add activity if userId provided\n      if (userId) {\n        await storage.createActivity({\n          userId: userId,\n          type: \"voice\",\n          title: \"Voice query processed\",\n          description: query,\n          icon: \"fas fa-microphone\",\n        });\n      }\n\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Voice query error:\", error);\n      res.status(500).json({ error: \"Failed to process voice query\" });\n    }\n  });\n\n  // User activities endpoint\n  app.get(\"/api/activities/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const activities = await storage.getActivitiesByUserId(userId);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Activities error:\", error);\n      res.status(500).json({ error: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Weather endpoint\n  app.get(\"/api/weather\", async (req, res) => {\n    try {\n      const validation = weatherSchema.safeParse(req.query);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.formErrors.fieldErrors });\n      }\n      const { location } = validation.data;\n      const weather = await weatherService.getCurrentWeather(location as string);\n      res.json(weather);\n    } catch (error) {\n      console.error(\"Weather error:\", error);\n      res.status(500).json({ error: \"Failed to fetch weather data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8325},"server/storage.ts":{"content":"import { users, type User, type InsertUser, type DiseaseScan, type Activity } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createDiseaseScan(scan: { userId: string; imageData: string; diagnosis?: string; confidence?: number; remedies?: string[] }): Promise<DiseaseScan>;\n  createActivity(activity: { userId: string; type: string; title: string; description?: string; icon?: string }): Promise<Activity>;\n  getActivitiesByUserId(userId: string): Promise<Activity[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private diseaseScans: Map<number, DiseaseScan>;\n  private activities: Map<number, Activity>;\n  currentId: number;\n  scanId: number;\n  activityId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.diseaseScans = new Map();\n    this.activities = new Map();\n    this.currentId = 1;\n    this.scanId = 1;\n    this.activityId = 1;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = (this.currentId++).toString();\n    const user: User = { \n      id,\n      email: insertUser.email || null,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      location: insertUser.location || null,\n      profileImageUrl: insertUser.profileImageUrl || null,\n      language: insertUser.language || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createDiseaseScan(scan: { userId: string; imageData: string; diagnosis?: string; confidence?: number; remedies?: string[] }): Promise<DiseaseScan> {\n    const id = this.scanId++;\n    const diseaseScan: DiseaseScan = {\n      id,\n      userId: scan.userId,\n      imageData: scan.imageData,\n      diagnosis: scan.diagnosis || null,\n      confidence: scan.confidence || null,\n      remedies: scan.remedies || [],\n      scanDate: new Date()\n    };\n    this.diseaseScans.set(id, diseaseScan);\n    return diseaseScan;\n  }\n\n  async createActivity(activity: { userId: string; type: string; title: string; description?: string; icon?: string }): Promise<Activity> {\n    const id = this.activityId++;\n    const newActivity: Activity = {\n      id,\n      userId: activity.userId,\n      type: activity.type,\n      title: activity.title,\n      description: activity.description || null,\n      icon: activity.icon || null,\n      createdAt: new Date()\n    };\n    this.activities.set(id, newActivity);\n    return newActivity;\n  }\n\n  async getActivitiesByUserId(userId: string): Promise<Activity[]> {\n    return Array.from(this.activities.values())\n      .filter(activity => activity.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3253},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2230},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  location: text(\"location\"),\n  language: text(\"language\").default(\"en\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const diseaseScans = pgTable(\"disease_scans\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  imageData: text(\"image_data\").notNull(), // base64 encoded image\n  diagnosis: text(\"diagnosis\"),\n  confidence: integer(\"confidence\"), // 0-100\n  remedies: jsonb(\"remedies\").$type<string[]>(),\n  scanDate: timestamp(\"scan_date\").defaultNow(),\n});\n\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: serial(\"id\").primaryKey(),\n  crop: text(\"crop\").notNull(),\n  price: integer(\"price\").notNull(), // price in paise\n  unit: text(\"unit\").default(\"kg\"),\n  market: text(\"market\").notNull(),\n  trend: text(\"trend\"), // \"up\", \"down\", \"stable\"\n  trendPercentage: integer(\"trend_percentage\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const governmentSchemes = pgTable(\"government_schemes\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: text(\"amount\"),\n  eligibility: jsonb(\"eligibility\").$type<string[]>(),\n  applicationLink: text(\"application_link\"),\n  isActive: boolean(\"is_active\").default(true),\n  category: text(\"category\"), // \"subsidy\", \"income_support\", \"loan\", etc.\n});\n\nexport const activities = pgTable(\"activities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // \"scan\", \"market\", \"scheme\", \"weather\"\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  location: true,\n  language: true,\n});\n\nexport const insertDiseaseScanSchema = createInsertSchema(diseaseScans).pick({\n  userId: true,\n  imageData: true,\n});\n\nexport const insertMarketPriceSchema = createInsertSchema(marketPrices).pick({\n  crop: true,\n  price: true,\n  unit: true,\n  market: true,\n  trend: true,\n  trendPercentage: true,\n});\n\nexport const insertGovernmentSchemeSchema = createInsertSchema(governmentSchemes).pick({\n  name: true,\n  description: true,\n  amount: true,\n  eligibility: true,\n  applicationLink: true,\n  category: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).pick({\n  userId: true,\n  type: true,\n  title: true,\n  description: true,\n  icon: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type DiseaseScan = typeof diseaseScans.$inferSelect;\nexport type InsertDiseaseScan = z.infer<typeof insertDiseaseScanSchema>;\n\nexport type MarketPrice = typeof marketPrices.$inferSelect;\nexport type InsertMarketPrice = z.infer<typeof insertMarketPriceSchema>;\n\nexport type GovernmentScheme = typeof governmentSchemes.$inferSelect;\nexport type InsertGovernmentScheme = z.infer<typeof insertGovernmentSchemeSchema>;\n\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\n","size_bytes":4014},"shared/validation.ts":{"content":"import { z } from \"zod\";\n\nexport const diagnoseDiseaseSchema = z.object({\n  imageData: z.string(),\n  userId: z.string().optional(),\n});\n\nexport const marketInsightSchema = z.object({\n  query: z.string(),\n  userId: z.string().optional(),\n});\n\nexport const marketAnalysisSchema = z.object({\n  query: z.string(),\n  userId: z.string().optional(),\n});\n\nexport const schemeRecommendationSchema = z.object({\n  query: z.string(),\n  userId: z.string().optional(),\n});\n\nexport const voiceQuerySchema = z.object({\n  query: z.string(),\n  userId: z.string().optional(),\n});\n\nexport const weatherSchema = z.object({\n  location: z.string(),\n});\n","size_bytes":630},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport DiseaseScanner from \"@/pages/disease-scanner\";\nimport MarketPrices from \"@/pages/market-prices\";\nimport GovernmentSchemes from \"@/pages/government-schemes\";\nimport Weather from \"@/pages/weather\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/scan\" component={DiseaseScanner} />\n      <Route path=\"/market\" component={MarketPrices} />\n      <Route path=\"/schemes\" component={GovernmentSchemes} />\n      <Route path=\"/weather\" component={Weather} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1128},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(355, 7%, 97%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom Project Kisan colors */\n  --farm-green: hsl(142, 76%, 36%);\n  --harvest-orange: hsl(38, 100%, 50%);\n  --trust-blue: hsl(207, 90%, 54%);\n  --success-green: hsl(122, 39%, 49%);\n  --warning-orange: hsl(36, 100%, 50%);\n  --error-red: hsl(4, 90%, 58%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(355, 7%, 97%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  \n  /* Dark mode custom colors */\n  --farm-green: hsl(142, 76%, 45%);\n  --harvest-orange: hsl(38, 100%, 60%);\n  --trust-blue: hsl(207, 90%, 64%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-farm-green {\n    background-color: var(--farm-green);\n  }\n  \n  .text-farm-green {\n    color: var(--farm-green);\n  }\n  \n  .bg-harvest-orange {\n    background-color: var(--harvest-orange);\n  }\n  \n  .text-harvest-orange {\n    color: var(--harvest-orange);\n  }\n  \n  .bg-trust-blue {\n    background-color: var(--trust-blue);\n  }\n  \n  .text-trust-blue {\n    color: var(--trust-blue);\n  }\n  \n  .bg-success-green {\n    background-color: var(--success-green);\n  }\n  \n  .text-success-green {\n    color: var(--success-green);\n  }\n  \n  .bg-warning-orange {\n    background-color: var(--warning-orange);\n  }\n  \n  .text-warning-orange {\n    color: var(--warning-orange);\n  }\n  \n  .bg-error-red {\n    background-color: var(--error-red);\n  }\n  \n  .text-error-red {\n    color: var(--error-red);\n  }\n}\n","size_bytes":2936},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini.ts":{"content":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { PROMPT_DIAGNOSE_DISEASE, PROMPT_MARKET_INSIGHT, PROMPT_VOICE_QUERY, PROMPT_MARKET_ANALYSIS } from \"./prompts\";\n\nconst API_KEY = process.env.GEMINI_API_KEY as string;\nconst MODEL = \"gemini-1.5-flash\";\n\nclass GeminiService {\n  private genAI: GoogleGenerativeAI;\n\n  constructor(apiKey: string) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  async diagnoseCropDisease(base64ImageData: string) {\n    const model = this.genAI.getGenerativeModel({ model: MODEL });\n    const imagePart = {\n      inlineData: {\n        data: base64ImageData,\n        mimeType: \"image/jpeg\",\n      },\n    };\n\n    try {\n      const result = await model.generateContent([PROMPT_DIAGNOSE_DISEASE, imagePart]);\n      const response = result.response;\n      const text = response.text();\n      return JSON.parse(text);\n    } catch (error) {\n      console.error(\"Error diagnosing crop disease:\", error);\n      throw new Error(\"Failed to diagnose crop disease\");\n    }\n  }\n\n  async getMarketInsight(query: string) {\n    const model = this.genAI.getGenerativeModel({ model: MODEL });\n\n    try {\n      const result = await model.generateContent([PROMPT_MARKET_INSIGHT, query]);\n      const response = result.response;\n      const text = response.text();\n      return text;\n    } catch (error) {\n      console.error(\"Error getting market insight:\", error);\n      throw new Error(\"Failed to get market insight\");\n    }\n  }\n\n  async generateMarketAnalysis(query: string) {\n    const model = this.genAI.getGenerativeModel({ model: MODEL });\n\n    try {\n      const result = await model.generateContent([PROMPT_MARKET_ANALYSIS, query]);\n      const response = result.response;\n      const text = response.text();\n      return JSON.parse(text);\n    } catch (error) {\n      console.error(\"Error generating market analysis:\", error);\n      throw new Error(\"Failed to generate market analysis\");\n    }\n  }\n  \n  async processVoiceQuery(query: string) {\n    const model = this.genAI.getGenerativeModel({ model: MODEL });\n\n    try {\n      const result = await model.generateContent([PROMPT_VOICE_QUERY, query]);\n      const response = result.response;\n      const text = response.text();\n      return text;\n    } catch (error) {\n      console.error(\"Error processing voice query:\", error);\n      throw new Error(\"Failed to process voice query\");\n    }\n  }\n}\n\nexport const geminiService = new GeminiService(API_KEY);\n","size_bytes":2447},"server/services/market.ts":{"content":"export interface MarketData {\n  crop: string;\n  price: number;\n  unit: string;\n  market: string;\n  trend: \"up\" | \"down\" | \"stable\";\n  trendPercentage: number;\n}\n\nexport class MarketService {\n  // Mock market data - in production, this would fetch from real APIs\n  private mockMarketData: MarketData[] = [\n    {\n      crop: \"Tomato\",\n      price: 2500, // in paise (₹25.00/kg)\n      unit: \"kg\",\n      market: \"Bangalore Mandi\",\n      trend: \"up\",\n      trendPercentage: 5,\n    },\n    {\n      crop: \"Onion\",\n      price: 1800, // in paise (₹18.00/kg)\n      unit: \"kg\",\n      market: \"Bangalore Mandi\",\n      trend: \"down\",\n      trendPercentage: -3,\n    },\n    {\n      crop: \"Rice\",\n      price: 3200, // in paise (₹32.00/kg)\n      unit: \"kg\",\n      market: \"Bangalore Mandi\",\n      trend: \"up\",\n      trendPercentage: 2,\n    },\n    {\n      crop: \"Wheat\",\n      price: 2800,\n      unit: \"kg\",\n      market: \"Bangalore Mandi\",\n      trend: \"stable\",\n      trendPercentage: 0,\n    },\n    {\n      crop: \"Maize\",\n      price: 2200,\n      unit: \"kg\",\n      market: \"Bangalore Mandi\",\n      trend: \"up\",\n      trendPercentage: 4,\n    },\n  ];\n\n  async getCurrentPrices(): Promise<MarketData[]> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return this.mockMarketData;\n  }\n\n  async getPriceForCrop(cropName: string): Promise<MarketData | null> {\n    const crop = this.mockMarketData.find(\n      item => item.crop.toLowerCase() === cropName.toLowerCase()\n    );\n    return crop || null;\n  }\n\n  async getMarketInsight(crop: string): Promise<string> {\n    const cropData = await this.getPriceForCrop(crop);\n    if (!cropData) {\n      return \"No market data available for this crop.\";\n    }\n\n    const trendText = cropData.trend === \"up\" ? \"increasing\" : \n                     cropData.trend === \"down\" ? \"decreasing\" : \"stable\";\n    \n    if (cropData.trend === \"up\") {\n      return `${crop} prices are trending ${trendText} by ${cropData.trendPercentage}% this week. Consider selling your harvest in the next 2-3 days for maximum profit.`;\n    } else if (cropData.trend === \"down\") {\n      return `${crop} prices are ${trendText} by ${Math.abs(cropData.trendPercentage)}% this week. You may want to hold off selling or consider alternative crops for next season.`;\n    } else {\n      return `${crop} prices are ${trendText} this week. Good time for steady sales at current market rates.`;\n    }\n  }\n}\n\nexport const marketService = new MarketService();\n","size_bytes":2491},"server/services/prompts.ts":{"content":"export const PROMPT_DIAGNOSE_DISEASE = `\nYou are an expert in agriculture. You are given an image of a crop disease. Your task is to identify the disease and provide a confidence score and remedies.\n\nReturn a JSON object with the following schema:\n\n{\n  \"disease\": \"...\",\n  \"confidence\": \"...\",\n  \"remedies\": [\n    \"...\",\n    \"...\",\n    \"...\"\n  ]\n}\n`;\n\nexport const PROMPT_MARKET_INSIGHT = `\nYou are an expert in agricultural markets. You are given a query about market trends. Your task is to provide a concise and informative market insight.\n\nReturn a string with the market insight.\n`;\n\nexport const PROMPT_MARKET_ANALYSIS = `\nYou are an expert in agricultural markets. You are given a query about market trends. Your task is to provide a detailed market analysis, including price predictions, demand forecast, and recommendations for farmers.\n\nReturn a JSON object with the following schema:\n\n{\n  \"analysis\": \"...\",\n  \"predictions\": [\n    {\n      \"crop\": \"...\",\n      \"predicted_price\": \"...\",\n      \"trend\": \"...\"\n    }\n  ],\n  \"recommendations\": [\n    \"...\",\n    \"...\"\n  ]\n}\n`;\n\nexport const PROMPT_VOICE_QUERY = `\nYou are a helpful AI assistant for farmers. You are given a voice query. Your task is to process the query and provide a helpful response.\n\nReturn a string with the response.\n`;\n","size_bytes":1297},"server/services/schemes.ts":{"content":"export interface SchemeData {\n  id: number;\n  name: string;\n  description: string;\n  amount: string;\n  eligibility: string[];\n  applicationLink: string;\n  category: string;\n  status: \"eligible\" | \"under_review\" | \"not_eligible\";\n}\n\nexport class SchemesService {\n  private schemes: SchemeData[] = [\n    {\n      id: 1,\n      name: \"PM-KISAN Scheme\",\n      description: \"Direct income support of ₹6,000 per year to eligible farmer families\",\n      amount: \"₹6,000/year\",\n      eligibility: [\n        \"Small and marginal farmers\",\n        \"Landholding up to 2 hectares\",\n        \"Valid Aadhaar card\",\n      ],\n      applicationLink: \"https://pmkisan.gov.in/\",\n      category: \"income_support\",\n      status: \"eligible\",\n    },\n    {\n      id: 2,\n      name: \"Drip Irrigation Subsidy\",\n      description: \"Up to 50% subsidy on drip irrigation systems\",\n      amount: \"50% subsidy\",\n      eligibility: [\n        \"Farmers with irrigation facilities\",\n        \"Minimum 0.5 hectare land\",\n        \"No previous subsidy claimed\",\n      ],\n      applicationLink: \"https://pmksy.gov.in/\",\n      category: \"subsidy\",\n      status: \"under_review\",\n    },\n    {\n      id: 3,\n      name: \"Crop Insurance Scheme\",\n      description: \"Comprehensive risk solution for crop loss coverage\",\n      amount: \"Up to ₹2 lakh coverage\",\n      eligibility: [\n        \"All farmers (loanee and non-loanee)\",\n        \"Coverage for pre-sowing to post-harvest\",\n        \"Premium varies by crop\",\n      ],\n      applicationLink: \"https://pmfby.gov.in/\",\n      category: \"insurance\",\n      status: \"eligible\",\n    },\n    {\n      id: 4,\n      name: \"Soil Health Card Scheme\",\n      description: \"Free soil testing and nutrient recommendations\",\n      amount: \"Free service\",\n      eligibility: [\n        \"All farmers\",\n        \"Valid land documents\",\n      ],\n      applicationLink: \"https://soilhealth.dac.gov.in/\",\n      category: \"advisory\",\n      status: \"eligible\",\n    },\n  ];\n\n  async getAllSchemes(): Promise<SchemeData[]> {\n    return this.schemes;\n  }\n\n  async getSchemeById(id: number): Promise<SchemeData | null> {\n    return this.schemes.find(scheme => scheme.id === id) || null;\n  }\n\n  async searchSchemes(query: string): Promise<SchemeData[]> {\n    const lowerQuery = query.toLowerCase();\n    return this.schemes.filter(scheme => \n      scheme.name.toLowerCase().includes(lowerQuery) ||\n      scheme.description.toLowerCase().includes(lowerQuery) ||\n      scheme.category.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  async getSchemesByCategory(category: string): Promise<SchemeData[]> {\n    return this.schemes.filter(scheme => scheme.category === category);\n  }\n\n  async getSchemeRecommendation(userQuery: string): Promise<string> {\n    const query = userQuery.toLowerCase();\n    \n    if (query.includes(\"income\") || query.includes(\"money\") || query.includes(\"support\")) {\n      return \"Based on your query, I recommend the PM-KISAN Scheme which provides ₹6,000 per year direct income support to eligible farmers.\";\n    }\n    \n    if (query.includes(\"irrigation\") || query.includes(\"water\") || query.includes(\"drip\")) {\n      return \"For irrigation needs, the Drip Irrigation Subsidy scheme offers up to 50% subsidy on drip irrigation systems.\";\n    }\n    \n    if (query.includes(\"insurance\") || query.includes(\"crop loss\") || query.includes(\"protection\")) {\n      return \"The Crop Insurance Scheme provides comprehensive coverage for crop losses with coverage up to ₹2 lakh.\";\n    }\n    \n    if (query.includes(\"soil\") || query.includes(\"fertilizer\") || query.includes(\"nutrients\")) {\n      return \"The Soil Health Card Scheme provides free soil testing and nutrient recommendations to optimize your crop yield.\";\n    }\n    \n    return \"I found several relevant schemes. The PM-KISAN scheme provides direct income support, while other schemes offer subsidies for irrigation, crop insurance, and soil health services.\";\n  }\n}\n\nexport const schemesService = new SchemesService();\n","size_bytes":3972},"server/services/weather.ts":{"content":"export interface WeatherData {\n  location: string;\n  temperature: number;\n  humidity: number;\n  rainfall: number;\n  condition: string;\n  advice: string;\n  forecast?: DayForecast[];\n}\n\nexport interface DayForecast {\n  date: string;\n  temperature: number;\n  condition: string;\n  rainfall: number;\n  humidity: number;\n}\n\nexport class WeatherService {\n  private apiKey: string | undefined;\n  private baseUrl = \"https://api.openweathermap.org/data/2.5\";\n\n  constructor() {\n    this.apiKey = process.env.OPENWEATHER_API_KEY;\n  }\n\n  async getCurrentWeather(location: string = \"Bangalore, Karnataka, IN\"): Promise<WeatherData> {\n    try {\n      // If no API key, use intelligent mock data based on location and season\n      if (!this.apiKey) {\n        return this.getIntelligentMockWeather(location);\n      }\n\n      const currentUrl = `${this.baseUrl}/weather?q=${encodeURIComponent(location)}&appid=${this.apiKey}&units=metric`;\n      const forecastUrl = `${this.baseUrl}/forecast?q=${encodeURIComponent(location)}&appid=${this.apiKey}&units=metric`;\n\n      const [currentResponse, forecastResponse] = await Promise.all([\n        fetch(currentUrl),\n        fetch(forecastUrl)\n      ]);\n\n      if (!currentResponse.ok || !forecastResponse.ok) {\n        throw new Error('Weather API request failed');\n      }\n\n      const currentData = await currentResponse.json();\n      const forecastData = await forecastResponse.json();\n\n      return this.formatWeatherData(currentData, forecastData);\n    } catch (error) {\n      console.error(\"Weather API error:\", error);\n      // Fallback to intelligent mock data\n      return this.getIntelligentMockWeather(location);\n    }\n  }\n\n  private formatWeatherData(current: any, forecast: any): WeatherData {\n    const temperature = Math.round(current.main.temp);\n    const humidity = current.main.humidity;\n    const condition = current.weather[0].main;\n    \n    // Calculate rainfall from forecast data\n    const rainfall = forecast.list\n      .slice(0, 8) // Next 24 hours (3-hour intervals)\n      .reduce((total: number, item: any) => {\n        return total + (item.rain?.['3h'] || 0);\n      }, 0);\n\n    return {\n      location: current.name + \", \" + current.sys.country,\n      temperature,\n      humidity,\n      rainfall: Math.round(rainfall * 10) / 10,\n      condition: this.mapCondition(condition),\n      advice: this.generateFarmingAdvice(temperature, humidity, rainfall, condition),\n      forecast: this.formatForecast(forecast.list)\n    };\n  }\n\n  private formatForecast(forecastList: any[]): DayForecast[] {\n    const dailyData = new Map<string, any>();\n    \n    // Group by date and calculate daily averages\n    forecastList.slice(0, 35).forEach(item => { // 5 days of data\n      const date = new Date(item.dt * 1000).toDateString();\n      if (!dailyData.has(date)) {\n        dailyData.set(date, {\n          temps: [],\n          conditions: [],\n          rainfall: 0,\n          humidity: []\n        });\n      }\n      \n      const dayData = dailyData.get(date);\n      dayData.temps.push(item.main.temp);\n      dayData.conditions.push(item.weather[0].main);\n      dayData.rainfall += (item.rain?.['3h'] || 0);\n      dayData.humidity.push(item.main.humidity);\n    });\n\n    return Array.from(dailyData.entries()).map(([date, data]) => ({\n      date,\n      temperature: Math.round(data.temps.reduce((a: number, b: number) => a + b, 0) / data.temps.length),\n      condition: this.mapCondition(this.getMostFrequent(data.conditions)),\n      rainfall: Math.round(data.rainfall * 10) / 10,\n      humidity: Math.round(data.humidity.reduce((a: number, b: number) => a + b, 0) / data.humidity.length)\n    }));\n  }\n\n  private getMostFrequent(arr: string[]): string {\n    return arr.sort((a, b) =>\n      arr.filter(v => v === a).length - arr.filter(v => v === b).length\n    ).pop() || arr[0];\n  }\n\n  private mapCondition(condition: string): string {\n    const conditionMap: Record<string, string> = {\n      'Clear': 'Sunny',\n      'Clouds': 'Cloudy',\n      'Rain': 'Rainy',\n      'Drizzle': 'Light Rain',\n      'Thunderstorm': 'Stormy',\n      'Snow': 'Snowy',\n      'Mist': 'Misty',\n      'Fog': 'Foggy'\n    };\n    return conditionMap[condition] || condition;\n  }\n\n  private generateFarmingAdvice(temp: number, humidity: number, rainfall: number, condition: string): string {\n    let advice = \"\";\n\n    if (temp > 35) {\n      advice += \"Very hot weather. Provide shade for crops and increase irrigation frequency. \";\n    } else if (temp > 30) {\n      advice += \"Hot weather. Water crops early morning or evening to prevent heat stress. \";\n    } else if (temp < 15) {\n      advice += \"Cool weather. Protect sensitive crops from cold. Reduce watering frequency. \";\n    } else {\n      advice += \"Favorable temperature for most crops. \";\n    }\n\n    if (humidity > 80) {\n      advice += \"High humidity increases risk of fungal diseases. Ensure good air circulation. \";\n    } else if (humidity < 40) {\n      advice += \"Low humidity may stress plants. Consider light misting in evening. \";\n    }\n\n    if (rainfall > 10) {\n      advice += \"Heavy rainfall expected. Ensure proper drainage to prevent waterlogging. \";\n    } else if (rainfall > 2) {\n      advice += \"Moderate rainfall expected. Good for irrigation savings. \";\n    } else {\n      advice += \"Little to no rainfall. Plan irrigation accordingly. \";\n    }\n\n    if (condition.includes('Storm')) {\n      advice += \"Storm warning! Secure crops and equipment. Avoid outdoor farm work.\";\n    }\n\n    return advice.trim();\n  }\n\n  private getIntelligentMockWeather(location: string): WeatherData {\n    const now = new Date();\n    const month = now.getMonth();\n    const isKarnataka = location.toLowerCase().includes('karnataka');\n    const isMonsoon = month >= 5 && month <= 9; // June to October\n    const isWinter = month >= 10 || month <= 2; // November to March\n    \n    let baseTemp = 25;\n    let humidity = 60;\n    let rainfall = 0;\n    let condition = \"Partly Cloudy\";\n\n    if (isKarnataka) {\n      if (isMonsoon) {\n        baseTemp = 24;\n        humidity = 85;\n        rainfall = 15 + Math.random() * 20;\n        condition = \"Rainy\";\n      } else if (isWinter) {\n        baseTemp = 22;\n        humidity = 55;\n        rainfall = 0;\n        condition = \"Clear\";\n      } else {\n        baseTemp = 28;\n        humidity = 70;\n        rainfall = 2;\n        condition = \"Partly Cloudy\";\n      }\n    }\n\n    // Add some realistic variation\n    const temperature = Math.round(baseTemp + (Math.random() * 6 - 3));\n    const finalHumidity = Math.round(humidity + (Math.random() * 20 - 10));\n    const finalRainfall = Math.round(rainfall * (0.5 + Math.random()) * 10) / 10;\n\n    return {\n      location: location || \"Karnataka, India\",\n      temperature,\n      humidity: Math.max(30, Math.min(95, finalHumidity)),\n      rainfall: Math.max(0, finalRainfall),\n      condition,\n      advice: this.generateFarmingAdvice(temperature, finalHumidity, finalRainfall, condition)\n    };\n  }\n}\n\nexport const weatherService = new WeatherService();","size_bytes":6992},"client/src/components/bottom-navigation.tsx":{"content":"import { useLocation } from 'wouter';\n\nexport function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  const navItems = [\n    { path: '/', icon: 'fas fa-home', label: 'Home' },\n    { path: '/scan', icon: 'fas fa-camera', label: 'Scan' },\n    { path: '/market', icon: 'fas fa-chart-line', label: 'Market' },\n    { path: '/schemes', icon: 'fas fa-landmark', label: 'Schemes' },\n    { path: '/weather', icon: 'fas fa-cloud-sun', label: 'Weather' },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-40\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex justify-around items-center py-2\">\n          {navItems.map((item) => (\n            <button\n              key={item.path}\n              onClick={() => setLocation(item.path)}\n              className={`flex flex-col items-center space-y-1 p-2 ${\n                location === item.path ? 'text-farm-green' : 'text-gray-600'\n              }`}\n            >\n              <i className={`${item.icon} text-xl`}></i>\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1219},"client/src/components/floating-voice-button.tsx":{"content":"import React, { useCallback } from 'react';\nimport { useVoice } from '@/hooks/use-voice';\nimport { useSpeechSynthesis } from '@/hooks/use-speech-synthesis';\nimport { processVoiceCommand } from '@/lib/speech';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function FloatingVoiceButton() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { speak } = useSpeechSynthesis();\n\n  const handleVoiceResult = useCallback((transcript: string) => {\n    const command = processVoiceCommand(transcript);\n    handleVoiceCommand(command, transcript);\n  }, []);\n\n  const handleVoiceError = useCallback((error: string) => {\n    toast({\n      title: \"Voice Error\",\n      description: `Speech recognition error: ${error}`,\n      variant: \"destructive\",\n    });\n  }, [toast]);\n\n  const { isListening, isSupported, toggleListening } = useVoice({\n    onResult: handleVoiceResult,\n    onError: handleVoiceError,\n  });\n\n  const handleVoiceCommand = (command: any, transcript: string) => {\n    speak(`I heard: ${transcript}`);\n    \n    switch (command.intent) {\n      case 'scan_disease':\n        setLocation('/scan');\n        speak('Opening disease scanner');\n        break;\n      case 'market_price':\n        setLocation('/market');\n        if (command.entity) {\n          speak(`Checking ${command.entity} prices`);\n        } else {\n          speak('Opening market prices');\n        }\n        break;\n      case 'government_scheme':\n        setLocation('/schemes');\n        speak('Opening government schemes');\n        break;\n      case 'weather':\n        setLocation('/weather');\n        speak('Checking weather information');\n        break;\n      default:\n        speak('I can help you with crop scanning, market prices, government schemes, or weather information. What would you like to know?');\n    }\n  };\n\n  if (!isSupported) {\n    return null;\n  }\n\n  return (\n    <button\n      onClick={toggleListening}\n      className={`fixed bottom-20 right-4 w-14 h-14 rounded-full shadow-lg flex items-center justify-center z-50 transition-all duration-200 ${\n        isListening \n          ? 'bg-red-500 hover:bg-red-600 animate-pulse' \n          : 'bg-harvest-orange hover:bg-orange-600'\n      } text-white`}\n    >\n      <i className={`fas ${isListening ? 'fa-stop' : 'fa-microphone'} text-xl`}></i>\n    </button>\n  );\n}\n","size_bytes":2372},"client/src/components/voice-indicator.tsx":{"content":"interface VoiceIndicatorProps {\n  isVisible: boolean;\n  isListening: boolean;\n}\n\nexport function VoiceIndicator({ isVisible, isListening }: VoiceIndicatorProps) {\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed top-20 right-4 z-50\">\n      <div className={`bg-harvest-orange text-white px-4 py-2 rounded-full shadow-lg flex items-center space-x-2 ${\n        isListening ? 'animate-pulse' : ''\n      }`}>\n        <i className=\"fas fa-microphone\"></i>\n        <span className=\"text-sm font-medium\">\n          {isListening ? 'Listening...' : 'Voice Mode Active'}\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":627},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-speech-synthesis.ts":{"content":"import { useState, useCallback, useEffect } from 'react';\n\ninterface UseSpeechSynthesisOptions {\n  voice?: SpeechSynthesisVoice;\n  rate?: number;\n  pitch?: number;\n  volume?: number;\n  lang?: string;\n}\n\nexport function useSpeechSynthesis(options: UseSpeechSynthesisOptions = {}) {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'speechSynthesis' in window) {\n      setIsSupported(true);\n      \n      const updateVoices = () => {\n        const availableVoices = speechSynthesis.getVoices();\n        setVoices(availableVoices);\n      };\n      \n      updateVoices();\n      speechSynthesis.addEventListener('voiceschanged', updateVoices);\n      \n      return () => {\n        speechSynthesis.removeEventListener('voiceschanged', updateVoices);\n      };\n    }\n  }, []);\n\n  const speak = useCallback((text: string, customOptions?: UseSpeechSynthesisOptions) => {\n    if (!isSupported) {\n      console.warn('Speech synthesis is not supported');\n      return;\n    }\n\n    // Stop any ongoing speech\n    speechSynthesis.cancel();\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    // Apply options\n    const finalOptions = { ...options, ...customOptions };\n    \n    if (finalOptions.voice) {\n      utterance.voice = finalOptions.voice;\n    } else if (finalOptions.lang) {\n      // Find a voice that matches the language\n      const matchingVoice = voices.find(voice => voice.lang.startsWith(finalOptions.lang!));\n      if (matchingVoice) {\n        utterance.voice = matchingVoice;\n      }\n    }\n    \n    utterance.rate = finalOptions.rate ?? 1;\n    utterance.pitch = finalOptions.pitch ?? 1;\n    utterance.volume = finalOptions.volume ?? 1;\n    utterance.lang = finalOptions.lang ?? 'en-IN';\n\n    utterance.onstart = () => setIsSpeaking(true);\n    utterance.onend = () => setIsSpeaking(false);\n    utterance.onerror = () => setIsSpeaking(false);\n\n    speechSynthesis.speak(utterance);\n  }, [isSupported, voices, options]);\n\n  const stop = useCallback(() => {\n    if (isSupported) {\n      speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  }, [isSupported]);\n\n  const pause = useCallback(() => {\n    if (isSupported) {\n      speechSynthesis.pause();\n    }\n  }, [isSupported]);\n\n  const resume = useCallback(() => {\n    if (isSupported) {\n      speechSynthesis.resume();\n    }\n  }, [isSupported]);\n\n  return {\n    isSupported,\n    isSpeaking,\n    voices,\n    speak,\n    stop,\n    pause,\n    resume,\n  };\n}\n","size_bytes":2616},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-voice.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\n\ninterface UseVoiceOptions {\n  onResult?: (transcript: string) => void;\n  onError?: (error: string) => void;\n  language?: string;\n}\n\nexport function useVoice({ onResult, onError, language = 'en-IN' }: UseVoiceOptions = {}) {\n  const [isListening, setIsListening] = useState(false);\n  const [isSupported, setIsSupported] = useState(false);\n  const [recognition, setRecognition] = useState<any | null>(null);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n      \n      if (SpeechRecognition) {\n        setIsSupported(true);\n        const recognitionInstance = new SpeechRecognition();\n        \n        recognitionInstance.continuous = false;\n        recognitionInstance.interimResults = false;\n        recognitionInstance.lang = language;\n        \n        recognitionInstance.onstart = () => {\n          setIsListening(true);\n        };\n        \n        recognitionInstance.onend = () => {\n          setIsListening(false);\n        };\n        \n        recognitionInstance.onresult = (event: any) => {\n          const transcript = event.results[0][0].transcript;\n          onResult?.(transcript);\n        };\n        \n        recognitionInstance.onerror = (event: any) => {\n          onError?.(event.error);\n          setIsListening(false);\n        };\n        \n        setRecognition(recognitionInstance);\n      } else {\n        setIsSupported(false);\n        onError?.('Speech recognition is not supported in this browser');\n      }\n    }\n  }, [language, onResult, onError]);\n\n  const startListening = useCallback(() => {\n    if (recognition && !isListening) {\n      recognition.start();\n    }\n  }, [recognition, isListening]);\n\n  const stopListening = useCallback(() => {\n    if (recognition && isListening) {\n      recognition.stop();\n    }\n  }, [recognition, isListening]);\n\n  const toggleListening = useCallback(() => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  }, [isListening, startListening, stopListening]);\n\n  return {\n    isListening,\n    isSupported,\n    startListening,\n    stopListening,\n    toggleListening,\n  };\n}\n","size_bytes":2257},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/speech.ts":{"content":"export interface SpeechConfig {\n  language: string;\n  rate: number;\n  pitch: number;\n  volume: number;\n}\n\nexport const defaultSpeechConfig: SpeechConfig = {\n  language: 'en-IN',\n  rate: 1,\n  pitch: 1,\n  volume: 1,\n};\n\nexport const languageVoiceMap: Record<string, string> = {\n  'en': 'en-IN',\n  'hi': 'hi-IN',\n  'kn': 'kn-IN',\n  'te': 'te-IN',\n};\n\nexport function getVoiceForLanguage(language: string): string {\n  return languageVoiceMap[language] || 'en-IN';\n}\n\nexport function processVoiceCommand(transcript: string): {\n  intent: string;\n  entity?: string;\n  confidence: number;\n} {\n  const lowerTranscript = transcript.toLowerCase();\n  \n  // Disease scanning intents\n  if (lowerTranscript.includes('scan') || lowerTranscript.includes('disease') || lowerTranscript.includes('crop')) {\n    return { intent: 'scan_disease', confidence: 0.9 };\n  }\n  \n  // Market price intents\n  if (lowerTranscript.includes('price') || lowerTranscript.includes('market') || lowerTranscript.includes('rate')) {\n    const crops = ['tomato', 'onion', 'rice', 'wheat', 'maize'];\n    const foundCrop = crops.find(crop => lowerTranscript.includes(crop));\n    return { \n      intent: 'market_price', \n      entity: foundCrop,\n      confidence: foundCrop ? 0.9 : 0.7 \n    };\n  }\n  \n  // Scheme intents\n  if (lowerTranscript.includes('scheme') || lowerTranscript.includes('subsidy') || lowerTranscript.includes('government')) {\n    return { intent: 'government_scheme', confidence: 0.8 };\n  }\n  \n  // Weather intents\n  if (lowerTranscript.includes('weather') || lowerTranscript.includes('rain') || lowerTranscript.includes('temperature')) {\n    return { intent: 'weather', confidence: 0.8 };\n  }\n  \n  // General query\n  return { intent: 'general_query', confidence: 0.5 };\n}\n","size_bytes":1749},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/disease-scanner.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { BottomNavigation } from '@/components/bottom-navigation';\nimport { FloatingVoiceButton } from '@/components/floating-voice-button';\n\ninterface DiagnosisResult {\n  disease: string;\n  confidence: number;\n  remedies: string[];\n  severity: string;\n}\n\nexport default function DiseaseScanner() {\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [diagnosisResult, setDiagnosisResult] = useState<DiagnosisResult | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const diagnoseMutation = useMutation({\n    mutationFn: async (imageData: string) => {\n      const response = await apiRequest('POST', '/api/diagnose-disease', {\n        imageData,\n        userId: 1, // Demo user ID\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setDiagnosisResult(data);\n      toast({\n        title: \"Diagnosis Complete\",\n        description: `${data.disease} detected with ${data.confidence}% confidence`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Diagnosis Failed\",\n        description: \"Failed to analyze the image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setSelectedImage(result);\n        setDiagnosisResult(null);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleAnalyze = () => {\n    if (selectedImage) {\n      diagnoseMutation.mutate(selectedImage);\n    }\n  };\n\n  const handleCameraCapture = () => {\n    // Trigger file input with camera preference\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16\">\n      {/* Header */}\n      <header className=\"bg-farm-green text-white shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center py-4\">\n            <h1 className=\"text-xl font-bold\">Crop Disease Scanner</h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Image Upload Section */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Upload Plant Image</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {selectedImage ? (\n                <div className=\"relative\">\n                  <img \n                    src={selectedImage} \n                    alt=\"Selected crop\" \n                    className=\"w-full h-64 object-cover rounded-lg border\"\n                  />\n                  <Button\n                    onClick={() => setSelectedImage(null)}\n                    className=\"absolute top-2 right-2 bg-red-500 hover:bg-red-600 text-white rounded-full w-8 h-8 p-0\"\n                  >\n                    ×\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"bg-gray-100 rounded-lg p-8 text-center border-2 border-dashed border-gray-300\">\n                  <i className=\"fas fa-camera text-4xl text-gray-400 mb-4\"></i>\n                  <p className=\"text-gray-600 mb-4\">Take a photo of the affected plant</p>\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <Button\n                  onClick={handleCameraCapture}\n                  className=\"bg-farm-green hover:bg-green-700 text-white py-3\"\n                >\n                  <i className=\"fas fa-camera mr-2\"></i>\n                  Take Photo\n                </Button>\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  variant=\"outline\"\n                  className=\"py-3\"\n                >\n                  <i className=\"fas fa-upload mr-2\"></i>\n                  Upload Image\n                </Button>\n              </div>\n\n              {selectedImage && (\n                <Button\n                  onClick={handleAnalyze}\n                  disabled={diagnoseMutation.isPending}\n                  className=\"w-full bg-blue-500 hover:bg-blue-600 text-white py-3\"\n                >\n                  {diagnoseMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-search mr-2\"></i>\n                      Analyze Disease\n                    </>\n                  )}\n                </Button>\n              )}\n\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                capture=\"environment\"\n                onChange={handleImageUpload}\n                className=\"hidden\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Diagnosis Results */}\n        {diagnosisResult && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-stethoscope mr-2 text-red-500\"></i>\n                Diagnosis Results\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <h3 className=\"font-bold text-red-800 text-lg mb-2\">\n                    {diagnosisResult.disease}\n                  </h3>\n                  <div className=\"flex items-center space-x-4 text-sm\">\n                    <span className=\"text-red-600\">\n                      Confidence: {diagnosisResult.confidence}%\n                    </span>\n                    <span className={`px-2 py-1 rounded text-xs font-medium ${\n                      diagnosisResult.severity === 'High' ? 'bg-red-100 text-red-800' :\n                      diagnosisResult.severity === 'Medium' ? 'bg-orange-100 text-orange-800' :\n                      'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {diagnosisResult.severity} Severity\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-green-800 mb-3\">\n                    <i className=\"fas fa-leaf mr-2\"></i>\n                    Recommended Remedies\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {diagnosisResult.remedies.map((remedy, index) => (\n                      <li key={index} className=\"flex items-start\">\n                        <span className=\"text-green-600 mr-2\">•</span>\n                        <span className=\"text-green-700 text-sm\">{remedy}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">\n                    <i className=\"fas fa-info-circle mr-2\"></i>\n                    Additional Tips\n                  </h4>\n                  <p className=\"text-blue-700 text-sm\">\n                    Monitor your crop daily and apply treatments in the early morning or evening. \n                    Consult your local agricultural expert if symptoms persist.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Voice Instructions */}\n        <Card className=\"mt-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"bg-harvest-orange bg-opacity-10 border border-harvest-orange rounded-lg p-3\">\n              <p className=\"text-sm text-harvest-orange font-medium\">\n                <i className=\"fas fa-microphone mr-2\"></i>\n                Say \"Scan my crop\" to start voice-guided diagnosis\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      <BottomNavigation />\n      <FloatingVoiceButton />\n    </div>\n  );\n}\n","size_bytes":8717},"client/src/pages/government-schemes.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { apiRequest } from '@/lib/queryClient';\nimport { BottomNavigation } from '@/components/bottom-navigation';\nimport { FloatingVoiceButton } from '@/components/floating-voice-button';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Scheme {\n  id: number;\n  name: string;\n  description: string;\n  amount: string;\n  eligibility: string[];\n  applicationLink: string;\n  category: string;\n  status: 'eligible' | 'under_review' | 'not_eligible';\n}\n\nexport default function GovernmentSchemes() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [recommendation, setRecommendation] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: schemes, isLoading } = useQuery<Scheme[]>({\n    queryKey: ['/api/schemes'],\n  });\n\n  const recommendationMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const response = await apiRequest('POST', '/api/schemes/recommend', {\n        query,\n        userId: 1,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setRecommendation(data.recommendation);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get scheme recommendation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetRecommendation = () => {\n    if (searchQuery.trim()) {\n      recommendationMutation.mutate(searchQuery);\n    }\n  };\n\n  const filteredSchemes = schemes?.filter(scheme =>\n    scheme.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    scheme.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    scheme.category.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'eligible': return 'bg-green-100 text-green-800';\n      case 'under_review': return 'bg-orange-100 text-orange-800';\n      case 'not_eligible': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'income_support': return 'fas fa-coins';\n      case 'subsidy': return 'fas fa-percentage';\n      case 'insurance': return 'fas fa-shield-alt';\n      case 'advisory': return 'fas fa-user-graduate';\n      default: return 'fas fa-file-alt';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16\">\n      {/* Header */}\n      <header className=\"bg-farm-green text-white shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center py-4\">\n            <h1 className=\"text-xl font-bold\">Government Schemes</h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search and Recommendation Section */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Find Relevant Schemes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Describe your need (e.g., 'subsidies for drip irrigation')\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleGetRecommendation()}\n                />\n                <Button\n                  onClick={handleGetRecommendation}\n                  disabled={recommendationMutation.isPending}\n                  className=\"bg-blue-500 hover:bg-blue-600\"\n                >\n                  {recommendationMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin\"></i>\n                  ) : (\n                    <i className=\"fas fa-search\"></i>\n                  )}\n                </Button>\n              </div>\n\n              {recommendation && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-blue-800 mb-2\">\n                    <i className=\"fas fa-lightbulb mr-2\"></i>\n                    AI Recommendation\n                  </h4>\n                  <p className=\"text-blue-700 text-sm\">{recommendation}</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Filter Tabs */}\n        <div className=\"flex space-x-2 mb-6 overflow-x-auto\">\n          <Button variant=\"outline\" size=\"sm\" className=\"whitespace-nowrap\">\n            All Schemes\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"whitespace-nowrap\">\n            Income Support\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"whitespace-nowrap\">\n            Subsidies\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"whitespace-nowrap\">\n            Insurance\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"whitespace-nowrap\">\n            Advisory\n          </Button>\n        </div>\n\n        {/* Schemes List */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-spinner fa-spin text-4xl text-gray-400 mb-4\"></i>\n            <p className=\"text-gray-600\">Loading schemes...</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredSchemes.map((scheme) => (\n              <Card key={scheme.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <div className=\"bg-blue-100 rounded-full w-10 h-10 flex items-center justify-center\">\n                          <i className={`${getCategoryIcon(scheme.category)} text-blue-600`}></i>\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-bold text-gray-800\">{scheme.name}</h3>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {scheme.category.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-600 mb-4\">{scheme.description}</p>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"font-semibold text-green-600\">{scheme.amount}</span>\n                          <Badge className={getStatusColor(scheme.status)}>\n                            {scheme.status === 'eligible' ? 'Eligible' :\n                             scheme.status === 'under_review' ? 'Under Review' : 'Not Eligible'}\n                          </Badge>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-medium text-gray-800 mb-2\">Eligibility:</h4>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {scheme.eligibility.map((criteria, index) => (\n                              <li key={index} className=\"flex items-start\">\n                                <span className=\"text-green-500 mr-2\">•</span>\n                                {criteria}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"ml-6 space-y-2\">\n                      <Button \n                        className=\"bg-blue-500 hover:bg-blue-600 text-white\"\n                        onClick={() => window.open(scheme.applicationLink, '_blank')}\n                      >\n                        Apply Now\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full\">\n                        View Details\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Quick Links */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Quick Links</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"p-4 h-auto\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-tractor text-2xl text-blue-500 mb-2\"></i>\n                  <div className=\"text-sm font-medium\">PM-KISAN Portal</div>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"p-4 h-auto\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-leaf text-2xl text-green-500 mb-2\"></i>\n                  <div className=\"text-sm font-medium\">Soil Health Card</div>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"p-4 h-auto\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-shield-alt text-2xl text-orange-500 mb-2\"></i>\n                  <div className=\"text-sm font-medium\">Crop Insurance</div>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      <BottomNavigation />\n      <FloatingVoiceButton />\n    </div>\n  );\n}\n","size_bytes":9974},"client/src/pages/home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { BottomNavigation } from '@/components/bottom-navigation';\nimport { FloatingVoiceButton } from '@/components/floating-voice-button';\nimport { VoiceIndicator } from '@/components/voice-indicator';\nimport { useState } from 'react';\n\ninterface MarketPrice {\n  crop: string;\n  trend: 'up' | 'down' | 'stable';\n  trendPercentage: number;\n  price: number;\n  unit: string;\n  market: string;\n}\n\ninterface Scheme {\n  id: number | string;\n  name: string;\n  description: string;\n  amount: string;\n  status: 'eligible' | 'under_review' | 'not_eligible';\n}\n\ninterface Activity {\n  id: number | string;\n  icon: string;\n  title: string;\n  description: string;\n  createdAt: string;\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [isVoiceMode, setIsVoiceMode] = useState(false);\n\n  const { data: marketPrices } = useQuery<MarketPrice[]>({\n    queryKey: ['/api/market-prices'],\n  });\n\n  const { data: schemes } = useQuery<Scheme[]>({\n    queryKey: ['/api/schemes'],\n  });\n\n  const { data: activities } = useQuery<Activity[]>({\n    queryKey: ['/api/activities/1'], // Using userId 1 for demo\n  });\n\n  const quickActions = [\n    {\n      title: 'Crop Disease',\n      description: 'Take a photo to diagnose plant diseases instantly',\n      icon: 'fas fa-camera',\n      color: 'bg-red-500 hover:bg-red-600',\n      iconBg: 'bg-red-100',\n      iconColor: 'text-red-600',\n      path: '/scan',\n    },\n    {\n      title: 'Market Prices',\n      description: 'Check current rates and price trends',\n      icon: 'fas fa-chart-line',\n      color: 'bg-green-500 hover:bg-green-600',\n      iconBg: 'bg-green-100',\n      iconColor: 'text-green-600',\n      path: '/market',\n    },\n    {\n      title: 'Gov Schemes',\n      description: 'Find subsidies and government support',\n      icon: 'fas fa-landmark',\n      color: 'bg-blue-500 hover:bg-blue-600',\n      iconBg: 'bg-blue-100',\n      iconColor: 'text-blue-600',\n      path: '/schemes',\n    },\n    {\n      title: 'Weather',\n      description: 'Get weather updates and farming advice',\n      icon: 'fas fa-cloud-sun',\n      color: 'bg-orange-500 hover:bg-orange-600',\n      iconBg: 'bg-orange-100',\n      iconColor: 'text-orange-600',\n      path: '/weather',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16\">\n      {/* Header */}\n      <header className=\"bg-farm-green text-white shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-seedling text-2xl\"></i>\n              <h1 className=\"text-xl font-bold\">Project Kisan</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <select className=\"bg-white text-farm-green px-3 py-2 rounded-lg text-sm font-medium\">\n                <option value=\"en\">English</option>\n                <option value=\"hi\">हिंदी</option>\n                <option value=\"kn\">ಕನ್ನಡ</option>\n                <option value=\"te\">తెలుగు</option>\n              </select>\n              <Button\n                onClick={() => setIsVoiceMode(!isVoiceMode)}\n                className=\"bg-harvest-orange hover:bg-orange-600 px-4 py-2 rounded-lg flex items-center space-x-2\"\n              >\n                <i className=\"fas fa-microphone\"></i>\n                <span className=\"hidden sm:inline text-sm font-medium\">Voice</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <VoiceIndicator isVisible={isVoiceMode} isListening={false} />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <img \n                src=\"https://images.unsplash.com/photo-1595273670150-bd0c3c392e46?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150\" \n                alt=\"Farmer profile\" \n                className=\"w-16 h-16 rounded-full object-cover\"\n              />\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-800\">Welcome, User</h2>\n                <p className=\"text-gray-600\">Farming in India</p>\n              </div>\n            </div>\n            <div className=\"bg-farm-green bg-opacity-10 border border-farm-green rounded-lg p-4\">\n              <p className=\"text-farm-green font-medium\">🌾 Your AI agricultural assistant is ready to help!</p>\n              <p className=\"text-sm text-gray-600 mt-1\">Tap the microphone to speak or use the tools below</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {quickActions.map((action) => (\n            <Card key={action.title} className=\"hover:shadow-xl transition-shadow cursor-pointer\">\n              <CardContent className=\"p-6\" onClick={() => setLocation(action.path)}>\n                <div className={`${action.iconBg} rounded-full w-16 h-16 flex items-center justify-center mb-4`}>\n                  <i className={`${action.icon} text-2xl ${action.iconColor}`}></i>\n                </div>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-2\">{action.title}</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">{action.description}</p>\n                <Button className={`w-full ${action.color} text-white py-3 font-medium`}>\n                  {action.title === 'Crop Disease' && 'Scan Disease'}\n                  {action.title === 'Market Prices' && 'View Prices'}\n                  {action.title === 'Gov Schemes' && 'Browse Schemes'}\n                  {action.title === 'Weather' && 'Check Weather'}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Market Prices Section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-xl font-bold text-gray-800\">Today's Market Prices</h3>\n              <Button variant=\"ghost\" className=\"text-farm-green hover:text-green-700 font-medium\">\n                <i className=\"fas fa-sync-alt mr-2\"></i>\n                Refresh\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n              {marketPrices?.slice(0, 3).map((price) => (\n                <div key={price.crop} className=\"border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h4 className=\"font-medium text-gray-800\">{price.crop}</h4>\n                    <span className={`text-sm font-medium ${\n                      price.trend === 'up' ? 'text-green-600' : \n                      price.trend === 'down' ? 'text-red-600' : 'text-gray-600'\n                    }`}>\n                      {price.trend === 'up' ? '+' : price.trend === 'down' ? '-' : ''}{Math.abs(price.trendPercentage)}%\n                    </span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-gray-800 mb-1\">₹{(price.price / 100).toFixed(0)}/{price.unit}</p>\n                  <p className=\"text-sm text-gray-600\">{price.market}</p>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-blue-700 mb-2\">\n                <i className=\"fas fa-robot mr-2\"></i>\n                AI Market Insight\n              </h4>\n              <p className=\"text-sm text-gray-700\">\n                Tomato prices are trending up by 5% this week. Consider selling your harvest in the next 2-3 days for maximum profit.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Government Schemes Section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-bold text-gray-800 mb-6\">Available Government Schemes</h3>\n            \n            <div className=\"space-y-4\">\n              {schemes?.slice(0, 2).map((scheme) => (\n                <div key={scheme.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-800 mb-2\">{scheme.name}</h4>\n                      <p className=\"text-sm text-gray-600 mb-3\">{scheme.description}</p>\n                      <div className=\"flex items-center space-x-4 text-sm\">\n                        <span className=\"text-green-600 font-medium\">{scheme.amount}</span>\n                        <span className={`${\n                          scheme.status === 'eligible' ? 'text-green-600' :\n                          scheme.status === 'under_review' ? 'text-orange-600' : 'text-red-600'\n                        }`}>\n                          {scheme.status === 'eligible' ? 'Eligible' :\n                           scheme.status === 'under_review' ? 'Under Review' : 'Not Eligible'}\n                        </span>\n                      </div>\n                    </div>\n                    <Button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 text-sm\">\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-bold text-gray-800 mb-6\">Recent Activity</h3>\n            \n            <div className=\"space-y-4\">\n              {activities?.slice(0, 3).map((activity) => (\n                <div key={activity.id} className=\"flex items-start space-x-4\">\n                  <div className=\"bg-farm-green bg-opacity-10 rounded-full w-10 h-10 flex items-center justify-center flex-shrink-0\">\n                    <i className={`${activity.icon} text-farm-green`}></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-800\">{activity.title}</h4>\n                    <p className=\"text-sm text-gray-600\">{activity.description}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(activity.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              )) || (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <i className=\"fas fa-history text-4xl mb-4 opacity-50\"></i>\n                  <p>No recent activity</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      <BottomNavigation />\n      <FloatingVoiceButton />\n    </div>\n  );\n}\n","size_bytes":11372},"client/src/pages/market-prices.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { apiRequest } from '@/lib/queryClient';\nimport { BottomNavigation } from '@/components/bottom-navigation';\nimport { FloatingVoiceButton } from '@/components/floating-voice-button';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface MarketPrice {\n  crop: string;\n  price: number;\n  unit: string;\n  market: string;\n  trend: 'up' | 'down' | 'stable';\n  trendPercentage: number;\n}\n\nexport default function MarketPrices() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [marketInsight, setMarketInsight] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: marketPrices, isLoading, refetch } = useQuery<MarketPrice[]>({\n    queryKey: ['/api/market-prices'],\n  });\n\n  const insightMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const response = await apiRequest('POST', '/api/market-insight', {\n        query,\n        userId: 1,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMarketInsight(data.insight);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get market insight\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetInsight = () => {\n    if (searchQuery.trim()) {\n      insightMutation.mutate(searchQuery);\n    }\n  };\n\n  const handleRefresh = () => {\n    refetch();\n    toast({\n      title: \"Refreshed\",\n      description: \"Market prices updated\",\n    });\n  };\n\n  const filteredPrices = marketPrices?.filter(price =>\n    price.crop.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up': return 'fas fa-arrow-up text-green-500';\n      case 'down': return 'fas fa-arrow-down text-red-500';\n      default: return 'fas fa-minus text-gray-500';\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up': return 'text-green-600 bg-green-50';\n      case 'down': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16\">\n      {/* Header */}\n      <header className=\"bg-farm-green text-white shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <h1 className=\"text-xl font-bold\">Market Prices</h1>\n            <Button\n              onClick={handleRefresh}\n              variant=\"ghost\"\n              className=\"text-white hover:bg-green-600\"\n            >\n              <i className=\"fas fa-sync-alt mr-2\"></i>\n              Refresh\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search and Insight Section */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Market Analysis</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Ask about crop prices (e.g., 'What is tomato price today?')\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleGetInsight()}\n                />\n                <Button\n                  onClick={handleGetInsight}\n                  disabled={insightMutation.isPending}\n                  className=\"bg-blue-500 hover:bg-blue-600\"\n                >\n                  {insightMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin\"></i>\n                  ) : (\n                    <i className=\"fas fa-search\"></i>\n                  )}\n                </Button>\n              </div>\n\n              {marketInsight && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-blue-800 mb-2\">\n                    <i className=\"fas fa-robot mr-2\"></i>\n                    AI Market Insight\n                  </h4>\n                  <p className=\"text-blue-700 text-sm\">{marketInsight}</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Price Cards Grid */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-spinner fa-spin text-4xl text-gray-400 mb-4\"></i>\n            <p className=\"text-gray-600\">Loading market prices...</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredPrices.map((price) => (\n              <Card key={price.crop} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-800\">{price.crop}</h3>\n                      <p className=\"text-sm text-gray-600\">{price.market}</p>\n                    </div>\n                    <div className={`px-3 py-1 rounded-full flex items-center space-x-1 ${getTrendColor(price.trend)}`}>\n                      <i className={getTrendIcon(price.trend)}></i>\n                      <span className=\"text-sm font-medium\">\n                        {price.trend === 'up' ? '+' : price.trend === 'down' ? '-' : ''}\n                        {Math.abs(price.trendPercentage)}%\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"text-3xl font-bold text-gray-800\">\n                      ₹{(price.price / 100).toFixed(0)}\n                      <span className=\"text-lg font-normal text-gray-600\">/{price.unit}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-600\">Last updated: Today</span>\n                      <Button variant=\"outline\" size=\"sm\">\n                        View Trends\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Price Comparison Section */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Price Comparison</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-2\">Crop</th>\n                    <th className=\"text-left py-2\">Current Price</th>\n                    <th className=\"text-left py-2\">Yesterday</th>\n                    <th className=\"text-left py-2\">Change</th>\n                    <th className=\"text-left py-2\">Market</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredPrices.map((price) => (\n                    <tr key={price.crop} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"py-3 font-medium\">{price.crop}</td>\n                      <td className=\"py-3\">₹{(price.price / 100).toFixed(0)}/{price.unit}</td>\n                      <td className=\"py-3\">₹{((price.price - (price.price * price.trendPercentage / 100)) / 100).toFixed(0)}</td>\n                      <td className=\"py-3\">\n                        <span className={`flex items-center space-x-1 ${\n                          price.trend === 'up' ? 'text-green-600' : \n                          price.trend === 'down' ? 'text-red-600' : 'text-gray-600'\n                        }`}>\n                          <i className={getTrendIcon(price.trend)}></i>\n                          <span>{Math.abs(price.trendPercentage)}%</span>\n                        </span>\n                      </td>\n                      <td className=\"py-3 text-gray-600\">{price.market}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      <BottomNavigation />\n      <FloatingVoiceButton />\n    </div>\n  );\n}\n","size_bytes":8692},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/weather.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { BottomNavigation } from '@/components/bottom-navigation';\nimport { FloatingVoiceButton } from '@/components/floating-voice-button';\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  humidity: number;\n  rainfall: number;\n  condition: string;\n  advice: string;\n  forecast?: DayForecast[];\n}\n\ninterface DayForecast {\n  date: string;\n  temperature: number;\n  condition: string;\n  rainfall: number;\n  humidity: number;\n}\n\nexport default function Weather() {\n  const [location, setLocation] = useState('Karnataka, India');\n  const [searchLocation, setSearchLocation] = useState('');\n\n  const { data: weather, isLoading, refetch } = useQuery<WeatherData>({\n    queryKey: ['/api/weather', location],\n    queryFn: ({ queryKey }) => {\n      const [, loc] = queryKey;\n      const params = new URLSearchParams();\n      if (loc) params.set('location', loc as string);\n      return fetch(`/api/weather?${params}`).then(res => res.json());\n    }\n  });\n\n  const handleLocationSearch = () => {\n    if (searchLocation.trim()) {\n      setLocation(searchLocation.trim());\n      setSearchLocation('');\n    }\n  };\n\n  const getLocationWeather = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setLocation(`${latitude},${longitude}`);\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          alert('Unable to get your location. Please enter manually.');\n        }\n      );\n    } else {\n      alert('Geolocation is not supported by this browser.');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16\">\n      {/* Header */}\n      <header className=\"bg-farm-green text-white shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center py-4\">\n            <h1 className=\"text-xl font-bold\">Weather & Farming Advice</h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        \n        {/* Location Search */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-search mr-2 text-blue-500\"></i>\n              Search Location\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Input\n                type=\"text\"\n                placeholder=\"Enter city, state, or coordinates\"\n                value={searchLocation}\n                onChange={(e) => setSearchLocation(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleLocationSearch()}\n                className=\"flex-1\"\n              />\n              <Button onClick={handleLocationSearch} className=\"sm:w-auto\">\n                <i className=\"fas fa-search mr-2\"></i>\n                Search\n              </Button>\n              <Button \n                onClick={getLocationWeather} \n                variant=\"outline\"\n                className=\"sm:w-auto\"\n              >\n                <i className=\"fas fa-location-arrow mr-2\"></i>\n                Use My Location\n              </Button>\n            </div>\n            <p className=\"text-sm text-gray-500 mt-2\">\n              Current: {location}\n            </p>\n            <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-sm text-blue-700\">\n                <i className=\"fas fa-info-circle mr-1\"></i>\n                Currently using intelligent weather estimates. For real-time data, add an OpenWeatherMap API key to get live weather updates.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-spinner fa-spin text-4xl text-gray-400 mb-4\"></i>\n            <p className=\"text-gray-600\">Getting accurate weather data...</p>\n          </div>\n        ) : weather ? (\n          <>\n            {/* Current Weather */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-map-marker-alt mr-2 text-red-500\"></i>\n                  {weather.location}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"bg-orange-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-thermometer-half text-2xl text-orange-600\"></i>\n                    </div>\n                    <div className=\"text-3xl font-bold text-gray-800\">{weather.temperature}°C</div>\n                    <div className=\"text-sm text-gray-600\">Temperature</div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-tint text-2xl text-blue-600\"></i>\n                    </div>\n                    <div className=\"text-3xl font-bold text-gray-800\">{weather.humidity}%</div>\n                    <div className=\"text-sm text-gray-600\">Humidity</div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-cloud-rain text-2xl text-green-600\"></i>\n                    </div>\n                    <div className=\"text-3xl font-bold text-gray-800\">{weather.rainfall}mm</div>\n                    <div className=\"text-sm text-gray-600\">Rainfall</div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"bg-yellow-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-sun text-2xl text-yellow-600\"></i>\n                    </div>\n                    <div className=\"text-lg font-bold text-gray-800\">{weather.condition}</div>\n                    <div className=\"text-sm text-gray-600\">Condition</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Farming Advice */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-robot mr-2 text-green-500\"></i>\n                  AI Farming Advice\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <p className=\"text-green-700\">{weather.advice}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Forecast */}\n            {weather.forecast && weather.forecast.length > 0 && (\n              <Card className=\"mb-6\">\n                <CardHeader>\n                  <CardTitle>5-Day Forecast</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                    {weather.forecast.map((day, i) => (\n                      <div key={i} className=\"text-center p-3 border rounded-lg\">\n                        <div className=\"text-sm font-medium text-gray-600 mb-2\">\n                          {new Date(day.date).toLocaleDateString('en', { weekday: 'short', month: 'short', day: 'numeric' })}\n                        </div>\n                        <i className={`fas ${\n                          day.condition.toLowerCase().includes('rain') ? 'fa-cloud-rain text-blue-500' :\n                          day.condition.toLowerCase().includes('cloud') ? 'fa-cloud text-gray-500' :\n                          day.condition.toLowerCase().includes('storm') ? 'fa-bolt text-purple-500' :\n                          'fa-sun text-yellow-500'\n                        } text-2xl mb-2`}></i>\n                        <div className=\"text-lg font-bold\">{day.temperature}°C</div>\n                        <div className=\"text-xs text-gray-600\">{day.condition}</div>\n                        <div className=\"text-xs text-blue-600\">{day.rainfall}mm</div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Farming Calendar */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-calendar-alt mr-2 text-blue-500\"></i>\n                  This Week's Farming Activities\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-4 p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold\">\n                      Mon\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">Irrigation Day</h4>\n                      <p className=\"text-sm text-gray-600\">Water crops early morning (6-8 AM)</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4 p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"bg-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold\">\n                      Wed\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">Pest Inspection</h4>\n                      <p className=\"text-sm text-gray-600\">Check for pest damage on leaves and stems</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4 p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold\">\n                      Fri\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">Fertilizer Application</h4>\n                      <p className=\"text-sm text-gray-600\">Apply organic fertilizer based on soil test results</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        ) : (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-exclamation-triangle text-4xl text-yellow-500 mb-4\"></i>\n            <p className=\"text-gray-600\">Weather data unavailable</p>\n          </div>\n        )}\n      </main>\n\n      <BottomNavigation />\n      <FloatingVoiceButton />\n    </div>\n  );\n}\n","size_bytes":11488},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }","size_bytes":139},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}